 day07
  
 배열의 정렬
 
 	치환정렬
 	=> 처음부터 하나씩 꺼내 비교
 	   대상을 꺼낸 다음 데이터부터 끝까지 꺼내서 비교
 	   
 	   오름차순에서 대상이 더 작다면 현재 데이터와 교체해줘야 한다.
 	   현재 데이터를 입력하면 기존 데이터는 사라지므로 찾을 수 없다.
 	   다른 변수에 담아 기존 데이터를 저장한다.
 	   
 	   
	flag 기법
 	=> 
 	
 		예]
 			for(){
 				break; - 1
 			
 			}		   - 2
 		=> 종료시점이 1인지 2인지 알 수 없다. 종료 시점을 찾을 때 사용	
 		=> 변수에 특정 데이터로 초기화 시켜놓고 특정 순간이 발생하면 변수의 데이터를 변경시킨다.
 		
 		
 배열의 복사
 	
 	1. 얕은 복사
 		=> 주소만 복사해주는 기법
 	   	   데이터는 공유하므로 한 곳에서 수정하면 복사한 곳에서도 수정된 데이터를 사용하게 된다.
 	   
 		방법]
 			int[] num1 = new int[5];
 			int[] num2;			<= 주소를 기억할 변수
 								   num2안에서는 데이터는 기억할 수 없고 오직 주소만 기억
 		
 			num1 = num2;		<= 얕은 복사
 		
		참고]
			지역 변수는 해당 지역(블럭)에서만 활동하므로
			다른 지역에서 Heap 영역의 데이터를 사용할 목적으로 얕은 복사 기법을 사용
 		
 		
 	2. 깊은 복사	
 		=> 데이터까지 복사해주는 기법
 		   데이터가 복사되므로 Heap 영역 다른 곳에 데이터가 한 번 더 존재하므로
 		   데이터의 주소가 달라진다.
 		   
 		   복사된 데이터는 독립적으로 사용
 		   
 		명령 ]
			System.arraycopy(1, 2, 3, 4, 5);
					
			1 - 원본 데이터의 주소
			2 - 원본 데이터의 복사를 시작할 위치
			3 - 복사받을 배열의 주소
			4 - 복사 받을 배열의 입력 시작 위치
			5 - 복사 받을 데이터의 갯수
 		
 		
 배열의 단점
 	1. 크기를 정하면 변경이 불가능
 	   => 깊은 복사를 사용해 데이터를 채워 넣는다.
 	
 	2. 동일 타입의 데이터만 입력 가능
 	   => 주소는 Heap Type에 의해 결정되므로 heap Type이 다르면 호환 ㄴㄴ
 	   
 	***
 	문자열은 변경이 자주 일어나는 문자열의 경우
	String 타입으로 만들지 않고
	StringBuffer 나 StringBuild타입으로 만들고 연산해서
	최종적으로 변경된 데이터를 String 타입으로 사용하는 것이 좋다.
		
	참고]
	레퍼런스 변수 란?
		주소를 기억하는 변수
		하지만 프로그램에서는 주소는 필요하지 않다.
		오직 데이터가 필요할 뿐이다.
		따라서 주소 변수는 데이터가 존재하는 위치를 알려줄 뿐이고
		핵심은 데이터가 들어갈 메모리, 실제 데이터가 더 중요하다.  
 	   
 	   
	문자열 배열 만들기
	
	String[] 변수이름;
	변수이름 = new String[길이];
	==> String[] 변수이름 =  new String[길이];
		
	변수이름[index] = 문자열데이터;
		
		
	문자열 배열도 초기화가 가능하다.
	String[] 변수이름 = {문자열1, 문자열2, ...};
	String[] 변수이름 = new String[]{문자열1, 문자열2, ...};
 	
 	
 	
 문자열에서 자주 사용하는 함수

	1. String은 필요에 따라서 문자배열로 변환해서 사용할 수 있다.
		
		함수 ]
			toCharArray() : 문자열을 문자배열로 반환해주는 함수
	
	2. charAt(위치)
		: 해당 위치의 문자를 반환해주는 함수
		
	3. indexOf(문자)
		: 문자열에서 해당문자가 위치하는 위치값을 반환
		
	4. length()
		: 문자열의 길이를 반환해주는 함수 	
 	
 	5. substring(시작위치)
 	   => 시작위치에서 맨 마지막까지 추출해서 반환
 	   substring(시작위치,종료위치)
 	   => 시작위치에서 종료위치까지
 	   
 	   참고]
 	  		시작 위치는 0부터 종료위치 앞까지 반환
 	
 	6. 문자열1.equals(문자열2)
 		=> 문자열이 동일값인지 비교
 		   boolean타입 true or false
 		   
	

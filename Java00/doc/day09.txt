 day09
 
 함수 (Method [Function])
 => 가장 작은 단위의 프로그램. 자바 기능의 최소 단위
  	프로그램 : 함수들로 구성
 
 	charAt() - 해당 위치의 문자열을 반환
 	random() - 0-1 사이의 숫자를 랜덤 추출
 	
 	
 	참고]
 	호출을 해주어야 실행됨
 	스스로 실행 불가능
 	실행이 완료되면 호출 시점에서 반복
 	
 	
 
 
 함수 만드는 방법
 	
 	[접근지정자][속성] 데이터타입 함수이름(매개변수 리스트){
 		함수 실행 내용
 		
 		[return [데이터];] // 반환값이 없는 경우 생략 가능
 	}
 	
 	함수 이름
 	=> 소문자로 시작, 숫자로 시작 안됨, 2가지 이상 단어는 스네이크 혹은 카멜 표기법
			==> 작성하는 사람이 지정하는사용자 정의어
 	
 	매개변수리스트
		==> 변수형태로 만드는 것
			개수는 상관 없다.
				
			목적 ]
				작성하는 함수가 해야하는 일을 실행하기 위해서 
				반드시 필요한 데이터가 있을 것이다.
				그 데이터를 거억할 준비를 하는 것이다.
				
			예]
				charAt(int pos)	==> 원하는 위치의 문자를 알려주는 한수
									이 함수가 원하는 작업을 수행하기 위해서는
									위치값이 반드시 필요하다.
									
				length()		==>	문자열의 길이를 알려주는 함수
									이 함수의 역할은 
									문자열의 개수를 세어서 알려주는 역할을 한다.
									따라서 필요한 데이터가 따로 필요하지 않다.
									따라서 이경우 매개변수는 필요치 않다.
		3. 반환값타입
			==>	함수는 한가지 목적을 달성하기 위한 가장 작은 단위의 프로그램이다.
				
				함수를 실행한다는 말은 그 함수가 가진 목적을 달성한다는 것과 같다.
				이때 그 달성된 목적에 따라 결과가 존재해야할 것이다.
				
				반환값 타입은
				함수에게 뭔가 일을 시켰을 때 
				그 함수가 일을 한 결과를 알려주는 것이다.
				
				그런데 그 결과는 경우에 따라서 달라질 것이다.
				
				결과는 존재하는 결과값의 경우에 따라서 달라지게 될 것이다.
				
				***
				단순히 결과값의 데이터 종류만 선언하면 된다.
				예]
					char charAt()	==> 이 함수의 결과는 문자로 알려주는것이다.
										따라서 반환값은 char 가 되어야 한다.
										
		참고 ]
			
			함수의 실행 결과가 반드시 있는 것은 아니다.
			예를 들어서
			뭔가를 출력하는 기능을 담당하는 함수는
			출력을 하고 나면 그 함수가 가지는 기능을 모두 수행한 것이다.
			따라서 이경우 결과 값은 없게 될 것이다.
			
			이런경우 반환값타입은 아무것도 안쓰는 것이 아니고
			반드시
				void
			라고 써줘야 한다.
			
		참고 ]
			함수는 가장 작은 한가지 목적을 위해 만들어지는 프로그램이다.
			
			따라서 반환값은
				*****
				" 한개 이거나, 없을 수 있다."
				
			반환값이 2개 이상있는 함수는 자바에서는 절대로 존재하지 못한다.
			
			예 ]
				
				int, float abc(){
					// 반환값타입이 두개이상인 함수는 절대로 존재 할수 없기 때문에
					// 잘못된 함수 작성....
				}
				
				
		결론 ]
			
			함수는 4가지 형태를 벗어나지 않는다.
				
				1. void abc(){}
				
				2. int abc(){}
				
				3. void abc(int a){}
				
				4. int abc(int a) {}
				
				
		참고 ]
			return의 의미
				
				==> 함수 안에서 사용할 수 있는 명령
				
				의미 ]
					1. 함수의 실행을 종료하세요.
						==> 함수의 실행을 즉시 종료하세요.
					2. 함수의 결과는 무엇입니다.
						==> 반환값이 있으면 반환해주고 즉시 종료하세요.
						
				
				형식 1]
					return;	==> 함수의 실행을 즉시 종료하세요.
					
				형식 2]
					return	데이터;	==> 반환값을 돌려주고 함수를 즉시 종료하세요.
					
			참고]
				반환값타입이 void 인 경우는 반드시 return; 만 사용해야 한다.
				함수가 준비하고 있는 매개변수리스트에 
				기억할 데이터를 제공하는 것
					
			따라서
			데이터는 그 함수가 준비한 매개변수의 갯수와 
			반드시 일치해야 하고( 넘쳐도 안되고 모자라도 안된다. )
			그 형태(데이터타입) 역시 일치해야 한다.
				
			예 ]
				void abc(int a){
						
				}
					
				abc();		==> 데이터의 갯수가 다르다. 에러 
				abc(5);		==> 성공. 갯수와 타입이 모두 정상적
				abc(3.14);	==> 데이터의 타입이 다르기 때문에 에러
				abc(3, 4);	==> 데이터의 갯수가 다르기 때문에 에러
					
				==>
				void abc(int a){
					int a = 5;
				}
				이런 형식으로 데이터가 기억이 될 것이고
				따라서 변수 a 는 abc() 의 영역내에서만 사용할 수 있는 지역 변수가 된다.
 


  반환값 사용 방법
  => 함수 호출 부분에 반환값 입력
  	 함수의 실행이 종료되면 호출 부분으로 돌아온다.
  	 
  	 int abc(){
  	 	int k = 10;
  	 	return k;
  	 }
  	 void def(int a){
  	 
  	 }
  	 int ghi(int a){
  	 	return 100;
  	 }
  	 abc();
  	 int a = abc();
  	 double b = abc();
  	 
  	 System.out.println(abc());	<= 10
  	 
  	 def(abc());	
  	 ghi(abc());	
  	 abc(ghi());	<= abc()는 데이터가 필요 ㄴㄴ, 오류
  	 
  	 
	 => 필요하지 않다면 반환값을 이용할 필요 없다.
 
 
 
 
				
 
 
 
 
 
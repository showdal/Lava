day14

예외처리의 목적
 - 프로그램의 정상적인 종료
 
예외처리
 - 프로그램상 문제가 없으나(문법상 오류가 없으나)
   데이터나 장비의 문제로 프로그램을 실행에 발생하는 에러를
   "실행 에러(Run Time Error)" 라고 표현하고
   자바에서는 "예외(Exception)"이라고 부른다.
   
   예외는 미리 예측해서 대처하는 방식으로 프로그램을 제작해야 하고
   그런 방식의 프로그램을 "예외 처리"라고 한다.
   
   자바에서는 예외처리 문법이 존재한다.
   
    형식]
   						1
		try{			2
   		실행문			3
  		} catch(#) { 	4
   	
   		} finally {		5
   	
   		}				6
  
 	순서]
 		에러 X : 1-2-3-5-6
 		에러 O : 1-2-4-5-6

	문제점]
		3 부분은 예외가 발생하면 실행되지 않는다.
		try{}의 범위에 따라 실행 할 수 있고, 실행되지 않을 수도 있다.
		
	
	예1]
		try{
			File Open	<= 파일이 없으면 에러가 난다.
		}
	
	예2]
		try{				1
			while(true){
				try{		2
					클라이언트의 접속을 받는 명령	<= 클라이언트 문제로 예외가 발생할 수 있다.
				}
			}				2 클라이언트의 접속을 받는다.
		}					1 다시는 클라이언트의 접속을 받지 않는다.
	
		
		
	자바 예외처리의 원리
	  - 예외가 발생하면 JVM은 발생한 예외 종류를 분석한 후
		예외에 대한 정보를 자바형식 클래스로 만들어서
		catch 부분에 그 클래스의 주소를 전달해준다.
		
		
	catch
	  - 예외가 발생하면 그 예외의 정보를 받아서 
	  	그 정보를 이용해 원하는 처리를 해줘야 한다.
		
		
	다중 catch (if - else if - else 구문 참고)
		
		try{} 안에 여러 복합적인 예외 발생 요소가 발생할 수 있다.
		이 중 어떤 에러때문인지 구분해야 할 때 사용하는 방법
			
		형식]
			try{
			
			} catch(#){
			
			} catch(#){
	
			} catch(#){
	
			}
			
		주의사항]
			다중 catch를 사용할 때
			반드시 실행될 수 있는 상태로 만들어야 한다.
			=> 예외의 범위가 좁은 쪽부터 기술해야 한다.	
			
-------------------------------------------------------------	
	문제2]
		if - else if 구문을 사용해서
		
		나이를 입력하면 10대, 20대,...
		판별해주는 프로그램을 작성하세요.
		
--------------------------------------------------------------	
finally 블럭
	==> 예외 발생 여부에 관계없이 반드시 실행되어야 할 명령이 존재할 경우
		이런 문장들을 입력하는 블럭
		
		
	참고 ]
		만약 finally 블럭이 존재한다면 catch 블럭을 생략해도 무방하다.
		(실재 실무에서는 catch 블럭을 생략안한다.)
		

예외 정보 출력하기
	==> 다음 이유에 의해서 예외 정보를 얻을 수 있다.
	
	1. 예외정보 클래스의 변수를 출력하면 된다.
	
		예]
			System.out.println(예외정보 클래스 변수);
			=> 예외의 원인을 파악할 수 있게 된다.
	
	2. 변수.printStackTrace()를 이용하는 방법
		=> 예외의 정보 + 예외가 발생한 위치와 경로를 추적해서 출력한다.
		
	
	예외처리는 예외가 발생하면 개발자가 그것을 수정해서 정상적으로 작동하도록
	만든다. 예외처리를 하는 것은 어려우며 경우가 많지 않다.
	
	예외를 하는 실제 이유는
	예외 정보에 관해 사용자에게 알려 프로그램 문제의 이유를 알리고
	프로그램이 정상적으로 종료되도록 하는 것이 목표이다.
	
-----------------------------------------------------------------------------

예외 전이하기
  - 함수는 프로그램의 가장 작은 단위로 한가지 작업을 하기 위한 것이다.
  	함수 안에서 작업을 하다 예외가 발생하면 그 함수는 더 이상 실행할 필요가 없다.	
	
	
	
	형식]
		[접근지정자][속성] 데이터타입 함수이름(매개변수리스트) throws 예외클래스1, 예외클래스2,...{
		
		}	
		=> 지정한 예외가 발생하면 이 함수는 실행을 중지시킨다.
	
	***
	예외 전이된 함수는 그 함수를 사용하는 곳에서 반드시 예외처리를 해줘야 한다.
	
	참고]
		전이하는 예외가
		RuntimeException의 하위인 경우에는 예외처리를 하지 않아도 된다.
		(주로 java.lang 패키지 소속 클래스에 있는 함수들에 많다.)
		
		해주는 것을 추천한다.
	
=================================================================================

Object 클래스
  - 자바로 만든 클래스의 최상위 클래스 역할을 하는 클래스
	솔직히 말해 하는일은 별로 없고
	자바 상속 관계를 명확하게 하기 위한 역할을 주로 하는 클래스
  
  
  1. equals()
  	- 비교 함수
  	  Object가 가진 equals 함수는 주소를 비교하는 함수이다.	
	
	참고 ]
		우리가 String 클래스의 equals 함수를 사용해서 문자열 데이터를 비교를 해서
		이 함수를 내용 비교함수로 알고 있는데
		이것은 String 클래스가 Object 클래스의 equals 함수를 오버라이드해서
		기능을 내용 비교로 변경시켜서 사용하는 함수로 만들어 놓은 것이다.
		따라서 
			Object.equals() 와 String.equals()의 차이점을 명확하게 구분해야 할 것이다.
			
	참고 ]
		만약 우리가 만드는 클래스도 내용 비교를 하도록 원하면
		이 함수를 오버라이드해서 기능을 수정하면 될 것이다.
		
		
--------------------------------------------------------------------------------------

문제2]
	삼각형 클래스를 작성하고
	밑변과 높이를 입력해서 객체를 만들도록 작성하고
	
	밑변이 같으면 같은 삼각형이 되도록
	equals, toString()을 오버라이드하고 테스트
	
	입출력은 JOptionPane 소속 함수로 하고
	예외처리도 하세요.	
	
	
	
	
	
	
	